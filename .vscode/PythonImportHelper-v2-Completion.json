[
    {
        "label": "reflex",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "reflex",
        "description": "reflex",
        "detail": "reflex",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "websockets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "websockets",
        "description": "websockets",
        "detail": "websockets",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "openai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openai",
        "description": "openai",
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "Question",
        "importPath": "quiz.models",
        "description": "quiz.models",
        "isExtraImport": true,
        "detail": "quiz.models",
        "documentation": {}
    },
    {
        "label": "Answer",
        "importPath": "quiz.models",
        "description": "quiz.models",
        "isExtraImport": true,
        "detail": "quiz.models",
        "documentation": {}
    },
    {
        "label": "QuizCategory",
        "importPath": "quiz.models",
        "description": "quiz.models",
        "isExtraImport": true,
        "detail": "quiz.models",
        "documentation": {}
    },
    {
        "label": "QuizCategory",
        "importPath": "quiz.models",
        "description": "quiz.models",
        "isExtraImport": true,
        "detail": "quiz.models",
        "documentation": {}
    },
    {
        "label": "Question",
        "importPath": "quiz.models",
        "description": "quiz.models",
        "isExtraImport": true,
        "detail": "quiz.models",
        "documentation": {}
    },
    {
        "label": "Answer",
        "importPath": "quiz.models",
        "description": "quiz.models",
        "isExtraImport": true,
        "detail": "quiz.models",
        "documentation": {}
    },
    {
        "label": "QuizCategory",
        "importPath": "quiz.models",
        "description": "quiz.models",
        "isExtraImport": true,
        "detail": "quiz.models",
        "documentation": {}
    },
    {
        "label": "Question",
        "importPath": "quiz.models",
        "description": "quiz.models",
        "isExtraImport": true,
        "detail": "quiz.models",
        "documentation": {}
    },
    {
        "label": "Answer",
        "importPath": "quiz.models",
        "description": "quiz.models",
        "isExtraImport": true,
        "detail": "quiz.models",
        "documentation": {}
    },
    {
        "label": "Question",
        "importPath": "quiz.models",
        "description": "quiz.models",
        "isExtraImport": true,
        "detail": "quiz.models",
        "documentation": {}
    },
    {
        "label": "Answer",
        "importPath": "quiz.models",
        "description": "quiz.models",
        "isExtraImport": true,
        "detail": "quiz.models",
        "documentation": {}
    },
    {
        "label": "QuizCategory",
        "importPath": "quiz.models",
        "description": "quiz.models",
        "isExtraImport": true,
        "detail": "quiz.models",
        "documentation": {}
    },
    {
        "label": "generate_questions_from_openai",
        "importPath": "quiz.app_add_generate_questions_with_api_openai",
        "description": "quiz.app_add_generate_questions_with_api_openai",
        "isExtraImport": true,
        "detail": "quiz.app_add_generate_questions_with_api_openai",
        "documentation": {}
    },
    {
        "label": "save_questions_to_db",
        "importPath": "quiz.app_add_generate_questions_with_api_openai",
        "description": "quiz.app_add_generate_questions_with_api_openai",
        "isExtraImport": true,
        "detail": "quiz.app_add_generate_questions_with_api_openai",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "TemplateResponse",
        "importPath": "django.template.response",
        "description": "django.template.response",
        "isExtraImport": true,
        "detail": "django.template.response",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "AsyncWebsocketConsumer",
        "importPath": "channels.generic.websocket",
        "description": "channels.generic.websocket",
        "isExtraImport": true,
        "detail": "channels.generic.websocket",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "SpectacularAPIView",
        "importPath": "drf_spectacular.views",
        "description": "drf_spectacular.views",
        "isExtraImport": true,
        "detail": "drf_spectacular.views",
        "documentation": {}
    },
    {
        "label": "SpectacularSwaggerView",
        "importPath": "drf_spectacular.views",
        "description": "drf_spectacular.views",
        "isExtraImport": true,
        "detail": "drf_spectacular.views",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "authentication_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "JWTAuthentication",
        "importPath": "rest_framework_simplejwt.authentication",
        "description": "rest_framework_simplejwt.authentication",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.authentication",
        "documentation": {}
    },
    {
        "label": "django",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django",
        "description": "django",
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "ProtocolTypeRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "URLRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "websocket_urlpatterns",
        "importPath": "quiz.routing",
        "description": "quiz.routing",
        "isExtraImport": true,
        "detail": "quiz.routing",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "environ",
        "description": "environ",
        "detail": "environ",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "QuizState",
        "kind": 6,
        "importPath": "quiz_frontend.pages.quiz",
        "description": "quiz_frontend.pages.quiz",
        "peekOfCode": "class QuizState(rx.State):\n    question: str = \"Cargando pregunta...\"\n    answers: list = []\n    correct_answer: str = \"\"\n    seconds_remaining: int = 30\n    score: int = 0\n    question_index: int = 0\n    game_over: bool = False\n    async def fetch_question(self):\n        \"\"\"Obtiene una pregunta del backend Django.\"\"\"",
        "detail": "quiz_frontend.pages.quiz",
        "documentation": {}
    },
    {
        "label": "quiz",
        "kind": 2,
        "importPath": "quiz_frontend.pages.quiz",
        "description": "quiz_frontend.pages.quiz",
        "peekOfCode": "def quiz():\n    return rx.center(\n        rx.vstack(\n            rx.heading(\"Pregunta:\", size=\"lg\"),\n            rx.text(QuizState.question),\n            rx.foreach(QuizState.answers, lambda answer: rx.button(answer, on_click=lambda: QuizState.check_answer(answer))),\n            rx.text(f\"Tiempo restante: {QuizState.seconds_remaining} s\"),\n            spacing=\"4\"\n        ),\n        height=\"100vh\"",
        "detail": "quiz_frontend.pages.quiz",
        "documentation": {}
    },
    {
        "label": "RankingState",
        "kind": 6,
        "importPath": "quiz_frontend.pages.ranking",
        "description": "quiz_frontend.pages.ranking",
        "peekOfCode": "class RankingState(rx.State):\n    ranking: list = []\n    async def get_ranking(self):\n        \"\"\"Obtiene los mejores puntajes del backend Django.\"\"\"\n        resp = await rx.get(\"/api/ranking/\")\n        self.ranking = resp.json()\ndef ranking():\n    return rx.center(\n        rx.vstack(\n            rx.heading(\"Ranking de Jugadores\", size=\"xl\"),",
        "detail": "quiz_frontend.pages.ranking",
        "documentation": {}
    },
    {
        "label": "ranking",
        "kind": 2,
        "importPath": "quiz_frontend.pages.ranking",
        "description": "quiz_frontend.pages.ranking",
        "peekOfCode": "def ranking():\n    return rx.center(\n        rx.vstack(\n            rx.heading(\"Ranking de Jugadores\", size=\"xl\"),\n            rx.foreach(RankingState.ranking, lambda score: rx.text(f\"{score['player_name']}: {score['points']} pts\")),\n            rx.button(\"Volver al Inicio\", on_click=lambda: rx.redirect(\"/\")),\n            spacing=\"4\"\n        ),\n        height=\"100vh\"\n    )",
        "detail": "quiz_frontend.pages.ranking",
        "documentation": {}
    },
    {
        "label": "render_answer",
        "kind": 2,
        "importPath": "quiz_frontend.components",
        "description": "quiz_frontend.components",
        "peekOfCode": "def render_answer(answer):\n    # Unwrap the reactive variable: use .value if available.\n    ans = answer.value if hasattr(answer, \"value\") else answer\n    return rx.button(\n        ans[\"text\"],\n        on_click=lambda: QuizState.select_answer(\n            QuizState.current_question_id,\n            ans[\"id\"]\n        ),\n        width=\"100%\",",
        "detail": "quiz_frontend.components",
        "documentation": {}
    },
    {
        "label": "question_component",
        "kind": 2,
        "importPath": "quiz_frontend.components",
        "description": "quiz_frontend.components",
        "peekOfCode": "def question_component():\n    return rx.box(\n        rx.text(QuizState.current_question_text, font_size=\"xl\", font_weight=\"bold\"),\n        rx.vstack(\n            rx.foreach(\n                # Pass the computed list directly.\n                QuizState.current_question_answers,\n                render_answer\n            ),\n            align_items=\"start\",",
        "detail": "quiz_frontend.components",
        "documentation": {}
    },
    {
        "label": "quiz_component",
        "kind": 2,
        "importPath": "quiz_frontend.components",
        "description": "quiz_frontend.components",
        "peekOfCode": "def quiz_component():\n    return rx.cond(\n        QuizState.quiz_completed,\n        rx.box(\n            rx.text(QuizState.quiz_result, font_size=\"2xl\"),\n            rx.button(\"Restart Quiz\", on_click=QuizState.fetch_questions),\n            text_align=\"center\",\n            padding=\"20px\",\n        ),\n        question_component(),",
        "detail": "quiz_frontend.components",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "quiz_frontend.quiz_frontend",
        "description": "quiz_frontend.quiz_frontend",
        "peekOfCode": "def index():\n    return rx.center(\n        rx.vstack(\n            rx.heading(\"Welcome to the Quiz App\", font_size=\"2xl\"),\n            rx.button(\"Start Quiz\", on_click=QuizState.fetch_questions),\n            quiz_component(),\n            spacing=\"20px\",\n        ),\n        padding=\"50px\",\n    )",
        "detail": "quiz_frontend.quiz_frontend",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "quiz_frontend.quiz_frontend",
        "description": "quiz_frontend.quiz_frontend",
        "peekOfCode": "app = rx.App(state=QuizState)\napp.add_page(index)\nif __name__ == \"__main__\":\n    app.serve()",
        "detail": "quiz_frontend.quiz_frontend",
        "documentation": {}
    },
    {
        "label": "QuizState",
        "kind": 6,
        "importPath": "quiz_frontend.state",
        "description": "quiz_frontend.state",
        "peekOfCode": "class QuizState(rx.State):\n    # A list of questions, where each question is a dict.\n    questions: List[Dict[str, Any]] = []\n    current_question_index: int = 0\n    selected_answers: List[Any] = []\n    score: int = 0\n    quiz_completed: bool = False\n    @rx.var(cache=True)\n    def current_question_text(self) -> str:\n        if self.questions:",
        "detail": "quiz_frontend.state",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "quiz_project.quiz.management.commands.generate_questions",
        "description": "quiz_project.quiz.management.commands.generate_questions",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Generates multiple-choice questions from OpenAI and saves them to the database.\"\n    def add_arguments(self, parser):\n        parser.add_argument(\"--category\", type=str, default=\"General Knowledge\", help=\"Category of the questions.\")\n        parser.add_argument(\"--difficulty\", type=str, choices=[\"easy\", \"medium\", \"hard\"], default=\"easy\", help=\"Difficulty level.\")\n        parser.add_argument(\"--num_questions\", type=int, default=5, help=\"Number of questions to generate.\")\n    def handle(self, *args, **options):\n        category = options[\"category\"]\n        difficulty = options[\"difficulty\"]\n        num_questions = options[\"num_questions\"]",
        "detail": "quiz_project.quiz.management.commands.generate_questions",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "quiz_project.quiz.management.commands.populate_db",
        "description": "quiz_project.quiz.management.commands.populate_db",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Populates the database with fake data'\n    def handle(self, *args, **kwargs):\n        # Call the function that populates the data\n        create_fake_data()\n        self.stdout.write(self.style.SUCCESS('Successfully populated the database with fake data'))",
        "detail": "quiz_project.quiz.management.commands.populate_db",
        "documentation": {}
    },
    {
        "label": "create_fake_data",
        "kind": 2,
        "importPath": "quiz_project.quiz.management.commands.populate_db",
        "description": "quiz_project.quiz.management.commands.populate_db",
        "peekOfCode": "def create_fake_data():\n    # Create 50 quiz categories if they don't exist\n    for _ in range(50):\n        category_name = fake.word().capitalize()\n        if not QuizCategory.objects.filter(name=category_name).exists():\n            category = QuizCategory.objects.create(name=category_name)\n            # Create 50 questions per category (total of 2500 questions)\n            difficulties = ['easy', 'medium', 'hard']\n            for _ in range(50):\n                question_text = fake.sentence()",
        "detail": "quiz_project.quiz.management.commands.populate_db",
        "documentation": {}
    },
    {
        "label": "fake",
        "kind": 5,
        "importPath": "quiz_project.quiz.management.commands.populate_db",
        "description": "quiz_project.quiz.management.commands.populate_db",
        "peekOfCode": "fake = Faker()\ndef create_fake_data():\n    # Create 50 quiz categories if they don't exist\n    for _ in range(50):\n        category_name = fake.word().capitalize()\n        if not QuizCategory.objects.filter(name=category_name).exists():\n            category = QuizCategory.objects.create(name=category_name)\n            # Create 50 questions per category (total of 2500 questions)\n            difficulties = ['easy', 'medium', 'hard']\n            for _ in range(50):",
        "detail": "quiz_project.quiz.management.commands.populate_db",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "quiz_project.quiz.migrations.0001_initial",
        "description": "quiz_project.quiz.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Question',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('text', models.CharField(max_length=255)),",
        "detail": "quiz_project.quiz.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "quiz_project.quiz.migrations.0002_alter_quizcategory_name",
        "description": "quiz_project.quiz.migrations.0002_alter_quizcategory_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('quiz', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='quizcategory',\n            name='name',\n            field=models.CharField(max_length=100),\n        ),",
        "detail": "quiz_project.quiz.migrations.0002_alter_quizcategory_name",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "quiz_project.quiz.migrations.0003_answer_unique_correct_answer",
        "description": "quiz_project.quiz.migrations.0003_answer_unique_correct_answer",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('quiz', '0002_alter_quizcategory_name'),\n    ]\n    operations = [\n        migrations.AddConstraint(\n            model_name='answer',\n            constraint=models.UniqueConstraint(fields=('question', 'is_correct'), name='unique_correct_answer'),\n        ),\n    ]",
        "detail": "quiz_project.quiz.migrations.0003_answer_unique_correct_answer",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "quiz_project.quiz.migrations.0004_remove_answer_unique_correct_answer_and_more",
        "description": "quiz_project.quiz.migrations.0004_remove_answer_unique_correct_answer_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('quiz', '0003_answer_unique_correct_answer'),\n    ]\n    operations = [\n        migrations.RemoveConstraint(\n            model_name='answer',\n            name='unique_correct_answer',\n        ),\n        migrations.AlterField(",
        "detail": "quiz_project.quiz.migrations.0004_remove_answer_unique_correct_answer_and_more",
        "documentation": {}
    },
    {
        "label": "create_fake_data",
        "kind": 2,
        "importPath": "quiz_project.quiz.utils.utils",
        "description": "quiz_project.quiz.utils.utils",
        "peekOfCode": "def create_fake_data():\n    # Create 50 quiz categories\n    categories = []\n    for _ in range(50):\n        category = QuizCategory.objects.create(name=fake.word().capitalize())\n        categories.append(category)\n    # Create 50 questions per category (total of 2500 questions)\n    difficulties = ['easy', 'medium', 'hard']\n    for category in categories:\n        for _ in range(50):",
        "detail": "quiz_project.quiz.utils.utils",
        "documentation": {}
    },
    {
        "label": "fake",
        "kind": 5,
        "importPath": "quiz_project.quiz.utils.utils",
        "description": "quiz_project.quiz.utils.utils",
        "peekOfCode": "fake = Faker()\ndef create_fake_data():\n    # Create 50 quiz categories\n    categories = []\n    for _ in range(50):\n        category = QuizCategory.objects.create(name=fake.word().capitalize())\n        categories.append(category)\n    # Create 50 questions per category (total of 2500 questions)\n    difficulties = ['easy', 'medium', 'hard']\n    for category in categories:",
        "detail": "quiz_project.quiz.utils.utils",
        "documentation": {}
    },
    {
        "label": "category_questions_data",
        "kind": 5,
        "importPath": "quiz_project.quiz.ad",
        "description": "quiz_project.quiz.ad",
        "peekOfCode": "category_questions_data = {\n    \"Science\": [\n    (\"What is the chemical symbol for water?\", [(\"H2O\", True), (\"O2\", False), (\"CO2\", False)]),\n    (\"What is the largest planet in our solar system?\", [(\"Jupiter\", True), (\"Saturn\", False), (\"Earth\", False)]),\n    (\"What is the chemical symbol for gold?\", [(\"Au\", True), (\"Ag\", False), (\"Fe\", False)]),\n    (\"Who is known as the father of modern physics?\", [(\"Albert Einstein\", True), (\"Isaac Newton\", False), (\"Galileo Galilei\", False)]),\n    (\"What is the chemical symbol for oxygen?\", [(\"O\", True), (\"O2\", False), (\"Ox\", False)]),\n    (\"What gas do plants absorb from the atmosphere?\", [(\"Carbon Dioxide\", True), (\"Oxygen\", False), (\"Nitrogen\", False)]),\n    (\"Which element has the chemical symbol He?\", [(\"Helium\", True), (\"Hydrogen\", False), (\"Hafnium\", False)]),\n    (\"What is the center of an atom called?\", [(\"Nucleus\", True), (\"Electron\", False), (\"Proton\", False)]),",
        "detail": "quiz_project.quiz.ad",
        "documentation": {}
    },
    {
        "label": "QuizCategoryAdmin",
        "kind": 6,
        "importPath": "quiz_project.quiz.admin",
        "description": "quiz_project.quiz.admin",
        "peekOfCode": "class QuizCategoryAdmin(admin.ModelAdmin):\n    list_display = ('name',)    \n    search_fields = ('name',)\n    ordering = ('name',)\n# 🔹 Función para exportar puntuaciones a CSV\ndef export_scores_to_csv(modeladmin, request, queryset=None):\n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = 'attachment; filename=\"scores.csv\"'\n    writer = csv.writer(response, csv.excel, delimiter=',')\n    # Escribir encabezados",
        "detail": "quiz_project.quiz.admin",
        "documentation": {}
    },
    {
        "label": "AnswerInline",
        "kind": 6,
        "importPath": "quiz_project.quiz.admin",
        "description": "quiz_project.quiz.admin",
        "peekOfCode": "class AnswerInline(admin.TabularInline):\n    model = Answer\n    extra = 1\n    fields = ['text', 'is_correct']\n# 🔹 Configuración del modelo Question en el admin\n@admin.register(Question)\nclass QuestionAdmin(admin.ModelAdmin):\n    list_display = ('text', 'quiz_category', 'difficulty')\n    list_filter = ('quiz_category', 'difficulty')\n    search_fields = ('text',)",
        "detail": "quiz_project.quiz.admin",
        "documentation": {}
    },
    {
        "label": "QuestionAdmin",
        "kind": 6,
        "importPath": "quiz_project.quiz.admin",
        "description": "quiz_project.quiz.admin",
        "peekOfCode": "class QuestionAdmin(admin.ModelAdmin):\n    list_display = ('text', 'quiz_category', 'difficulty')\n    list_filter = ('quiz_category', 'difficulty')\n    search_fields = ('text',)\n    ordering = ('difficulty',)\n    inlines = [AnswerInline]\n# 🔹 Configuración del modelo Score en el admin (con botón de exportación)\n@admin.register(Score)\nclass ScoreAdmin(admin.ModelAdmin):\n    list_display = ('player_name', 'points', 'date')",
        "detail": "quiz_project.quiz.admin",
        "documentation": {}
    },
    {
        "label": "ScoreAdmin",
        "kind": 6,
        "importPath": "quiz_project.quiz.admin",
        "description": "quiz_project.quiz.admin",
        "peekOfCode": "class ScoreAdmin(admin.ModelAdmin):\n    list_display = ('player_name', 'points', 'date')\n    list_filter = ('date',)\n    search_fields = ('player_name',)\n    ordering = ('-points',)\n    actions = [export_scores_to_csv]\n    actions_on_top = True\n    change_list_template = \"admin/score_change_list.html\"  # Plantilla personalizada\n    # Agregar URL para exportar CSV desde un botón\n    def get_urls(self):",
        "detail": "quiz_project.quiz.admin",
        "documentation": {}
    },
    {
        "label": "AnswerAdmin",
        "kind": 6,
        "importPath": "quiz_project.quiz.admin",
        "description": "quiz_project.quiz.admin",
        "peekOfCode": "class AnswerAdmin(admin.ModelAdmin):\n    list_display = ('question', 'text', 'is_correct')\n    list_filter = ('is_correct',)\n    search_fields = ('text',)",
        "detail": "quiz_project.quiz.admin",
        "documentation": {}
    },
    {
        "label": "export_scores_to_csv",
        "kind": 2,
        "importPath": "quiz_project.quiz.admin",
        "description": "quiz_project.quiz.admin",
        "peekOfCode": "def export_scores_to_csv(modeladmin, request, queryset=None):\n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = 'attachment; filename=\"scores.csv\"'\n    writer = csv.writer(response, csv.excel, delimiter=',')\n    # Escribir encabezados\n    writer.writerow(['Jugador', 'Puntos', 'Fecha'])\n    # Obtener los datos a exportar (todos o filtrados)\n    scores = queryset if queryset else Score.objects.all()\n    for score in scores:\n        writer.writerow([score.player_name, score.points, score.date.strftime('%Y-%m-%d %H:%M:%S')])",
        "detail": "quiz_project.quiz.admin",
        "documentation": {}
    },
    {
        "label": "export_scores_to_csv.short_description",
        "kind": 5,
        "importPath": "quiz_project.quiz.admin",
        "description": "quiz_project.quiz.admin",
        "peekOfCode": "export_scores_to_csv.short_description = \"📥 Exportar puntuaciones a CSV\"\n# 🔹 Inline para mostrar respuestas dentro de la pregunta\nclass AnswerInline(admin.TabularInline):\n    model = Answer\n    extra = 1\n    fields = ['text', 'is_correct']\n# 🔹 Configuración del modelo Question en el admin\n@admin.register(Question)\nclass QuestionAdmin(admin.ModelAdmin):\n    list_display = ('text', 'quiz_category', 'difficulty')",
        "detail": "quiz_project.quiz.admin",
        "documentation": {}
    },
    {
        "label": "QuestionViewSet",
        "kind": 6,
        "importPath": "quiz_project.quiz.api",
        "description": "quiz_project.quiz.api",
        "peekOfCode": "class QuestionViewSet(viewsets.ModelViewSet):\n    \"\"\"API endpoint for managing questions\"\"\"\n    queryset = Question.objects.all()\n    serializer_class = QuestionSerializer\nclass AnswerViewSet(viewsets.ModelViewSet):\n    \"\"\"API endpoint for managing answers\"\"\"\n    queryset = Answer.objects.all()\n    serializer_class = AnswerSerializer\nclass ScoreViewSet(viewsets.ModelViewSet):\n    \"\"\"API endpoint for managing scores\"\"\"",
        "detail": "quiz_project.quiz.api",
        "documentation": {}
    },
    {
        "label": "AnswerViewSet",
        "kind": 6,
        "importPath": "quiz_project.quiz.api",
        "description": "quiz_project.quiz.api",
        "peekOfCode": "class AnswerViewSet(viewsets.ModelViewSet):\n    \"\"\"API endpoint for managing answers\"\"\"\n    queryset = Answer.objects.all()\n    serializer_class = AnswerSerializer\nclass ScoreViewSet(viewsets.ModelViewSet):\n    \"\"\"API endpoint for managing scores\"\"\"\n    queryset = Score.objects.all().order_by('-date')  # Sort by latest scores\n    serializer_class = ScoreSerializer",
        "detail": "quiz_project.quiz.api",
        "documentation": {}
    },
    {
        "label": "ScoreViewSet",
        "kind": 6,
        "importPath": "quiz_project.quiz.api",
        "description": "quiz_project.quiz.api",
        "peekOfCode": "class ScoreViewSet(viewsets.ModelViewSet):\n    \"\"\"API endpoint for managing scores\"\"\"\n    queryset = Score.objects.all().order_by('-date')  # Sort by latest scores\n    serializer_class = ScoreSerializer",
        "detail": "quiz_project.quiz.api",
        "documentation": {}
    },
    {
        "label": "QuizConfig",
        "kind": 6,
        "importPath": "quiz_project.quiz.apps",
        "description": "quiz_project.quiz.apps",
        "peekOfCode": "class QuizConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'quiz'",
        "detail": "quiz_project.quiz.apps",
        "documentation": {}
    },
    {
        "label": "generate_questions_from_openai",
        "kind": 2,
        "importPath": "quiz_project.quiz.app_add_generate_questions_with_api_openai",
        "description": "quiz_project.quiz.app_add_generate_questions_with_api_openai",
        "peekOfCode": "def generate_questions_from_openai(prompt, num_questions=5):\n    try:\n        response = openai.ChatCompletion.create(\n            model=\"gpt-3.5-turbo\",  # Asegúrate de que este modelo exista\n            messages=[\n                {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n                {\"role\": \"user\", \"content\": prompt}\n            ],\n            max_tokens=700,\n            temperature=0.7",
        "detail": "quiz_project.quiz.app_add_generate_questions_with_api_openai",
        "documentation": {}
    },
    {
        "label": "save_questions_to_db",
        "kind": 2,
        "importPath": "quiz_project.quiz.app_add_generate_questions_with_api_openai",
        "description": "quiz_project.quiz.app_add_generate_questions_with_api_openai",
        "peekOfCode": "def save_questions_to_db(questions_data):\n    \"\"\"\n    Guarda preguntas y respuestas en la base de datos.\n    :param questions_data: Lista de diccionarios con preguntas y respuestas.\n    \"\"\"\n    for question_data in questions_data:\n        category_name = question_data.get(\"category\", \"General Knowledge\")\n        difficulty = question_data.get(\"difficulty\", \"easy\")\n        question_text = question_data.get(\"question\", \"\")\n        # Buscar o crear la categoría",
        "detail": "quiz_project.quiz.app_add_generate_questions_with_api_openai",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "quiz_project.quiz.app_add_generate_questions_with_api_openai",
        "description": "quiz_project.quiz.app_add_generate_questions_with_api_openai",
        "peekOfCode": "def main():\n    # Prompt mejorado para asegurar salida JSON correcta\n    prompt = \"\"\"\n    Generate 5 multiple-choice questions on general knowledge.\n    Each question should have exactly 4 possible answers, with one correct answer.\n    Format the response as a JSON array like this:\n    [\n      {\n        \"question\": \"What is the capital of France?\",\n        \"answers\": [",
        "detail": "quiz_project.quiz.app_add_generate_questions_with_api_openai",
        "documentation": {}
    },
    {
        "label": "openai.api_key",
        "kind": 5,
        "importPath": "quiz_project.quiz.app_add_generate_questions_with_api_openai",
        "description": "quiz_project.quiz.app_add_generate_questions_with_api_openai",
        "peekOfCode": "openai.api_key = os.environ.get(\"OPENAI_API_KEY\")\ndef generate_questions_from_openai(prompt, num_questions=5):\n    try:\n        response = openai.ChatCompletion.create(\n            model=\"gpt-3.5-turbo\",  # Asegúrate de que este modelo exista\n            messages=[\n                {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n                {\"role\": \"user\", \"content\": prompt}\n            ],\n            max_tokens=700,",
        "detail": "quiz_project.quiz.app_add_generate_questions_with_api_openai",
        "documentation": {}
    },
    {
        "label": "QuizTimerConsumer",
        "kind": 6,
        "importPath": "quiz_project.quiz.consumers",
        "description": "quiz_project.quiz.consumers",
        "peekOfCode": "class QuizTimerConsumer(AsyncWebsocketConsumer):\n    async def connect(self):\n        self.room_group_name = \"quiz_timer\"\n        await self.channel_layer.group_add(self.room_group_name, self.channel_name)\n        await self.accept()\n    async def disconnect(self, close_code):\n        await self.channel_layer.group_discard(self.room_group_name, self.channel_name)\n    async def receive(self, text_data):\n        \"\"\"Recibe mensajes del cliente (si es necesario).\"\"\"\n        data = json.loads(text_data)",
        "detail": "quiz_project.quiz.consumers",
        "documentation": {}
    },
    {
        "label": "QuizCategory",
        "kind": 6,
        "importPath": "quiz_project.quiz.models",
        "description": "quiz_project.quiz.models",
        "peekOfCode": "class QuizCategory(models.Model):\n    name = models.CharField(max_length=255, unique=True)\n    def __str__(self):\n        return self.name\nclass Question(models.Model):\n    # Define difficulty levels\n    EASY = 'easy'\n    MEDIUM = 'medium'\n    HARD = 'hard'\n    DIFFICULTY_CHOICES = [",
        "detail": "quiz_project.quiz.models",
        "documentation": {}
    },
    {
        "label": "Question",
        "kind": 6,
        "importPath": "quiz_project.quiz.models",
        "description": "quiz_project.quiz.models",
        "peekOfCode": "class Question(models.Model):\n    # Define difficulty levels\n    EASY = 'easy'\n    MEDIUM = 'medium'\n    HARD = 'hard'\n    DIFFICULTY_CHOICES = [\n        (EASY, 'Easy'),\n        (MEDIUM, 'Medium'),\n        (HARD, 'Hard'),\n    ]",
        "detail": "quiz_project.quiz.models",
        "documentation": {}
    },
    {
        "label": "Answer",
        "kind": 6,
        "importPath": "quiz_project.quiz.models",
        "description": "quiz_project.quiz.models",
        "peekOfCode": "class Answer(models.Model):\n    question = models.ForeignKey(\n        Question, \n        on_delete=models.CASCADE, \n        related_name='answers'\n    )\n    text = models.TextField()\n    is_correct = models.BooleanField(default=False)\n    def __str__(self):\n        status = \"Correct\" if self.is_correct else \"Incorrect\"",
        "detail": "quiz_project.quiz.models",
        "documentation": {}
    },
    {
        "label": "Score",
        "kind": 6,
        "importPath": "quiz_project.quiz.models",
        "description": "quiz_project.quiz.models",
        "peekOfCode": "class Score(models.Model):\n    player_name = models.CharField(max_length=100)\n    points = models.IntegerField()\n    date = models.DateTimeField(auto_now_add=True)\n    question = models.ForeignKey(Question, on_delete=models.CASCADE, related_name=\"scores\", null=True, blank=True)\n    def __str__(self):\n        return f\"{self.player_name} - {self.points}\"",
        "detail": "quiz_project.quiz.models",
        "documentation": {}
    },
    {
        "label": "websocket_urlpatterns",
        "kind": 5,
        "importPath": "quiz_project.quiz.routing",
        "description": "quiz_project.quiz.routing",
        "peekOfCode": "websocket_urlpatterns = [\n    re_path(r'ws/quiz/timer/$', QuizTimerConsumer.as_asgi()),\n]",
        "detail": "quiz_project.quiz.routing",
        "documentation": {}
    },
    {
        "label": "QuizCategorySerializer",
        "kind": 6,
        "importPath": "quiz_project.quiz.serializers",
        "description": "quiz_project.quiz.serializers",
        "peekOfCode": "class QuizCategorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = QuizCategory\n        fields = '__all__'\nclass AnswerSerializer(serializers.ModelSerializer):\n    # Optionally, if you want to use a custom field for the question reference:\n    question_id = serializers.PrimaryKeyRelatedField(\n        queryset=Question.objects.all(), write_only=True, source='question'\n    )\n    class Meta:",
        "detail": "quiz_project.quiz.serializers",
        "documentation": {}
    },
    {
        "label": "AnswerSerializer",
        "kind": 6,
        "importPath": "quiz_project.quiz.serializers",
        "description": "quiz_project.quiz.serializers",
        "peekOfCode": "class AnswerSerializer(serializers.ModelSerializer):\n    # Optionally, if you want to use a custom field for the question reference:\n    question_id = serializers.PrimaryKeyRelatedField(\n        queryset=Question.objects.all(), write_only=True, source='question'\n    )\n    class Meta:\n        model = Answer\n        fields = ['id', 'text', 'is_correct', 'question_id']\nclass QuestionSerializer(serializers.ModelSerializer):\n    # Nest answers if needed:",
        "detail": "quiz_project.quiz.serializers",
        "documentation": {}
    },
    {
        "label": "QuestionSerializer",
        "kind": 6,
        "importPath": "quiz_project.quiz.serializers",
        "description": "quiz_project.quiz.serializers",
        "peekOfCode": "class QuestionSerializer(serializers.ModelSerializer):\n    # Nest answers if needed:\n    answers = AnswerSerializer(many=True, read_only=True)\n    class Meta:\n        model = Question\n        fields = '__all__'\nclass ScoreSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Score\n        fields = '__all__'",
        "detail": "quiz_project.quiz.serializers",
        "documentation": {}
    },
    {
        "label": "ScoreSerializer",
        "kind": 6,
        "importPath": "quiz_project.quiz.serializers",
        "description": "quiz_project.quiz.serializers",
        "peekOfCode": "class ScoreSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Score\n        fields = '__all__'",
        "detail": "quiz_project.quiz.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "quiz_project.quiz.urls",
        "description": "quiz_project.quiz.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'categories', QuizCategoryViewSet, basename=\"quizcategory\")\nrouter.register(r'questions', QuestionViewSet, basename=\"question\")\nrouter.register(r'answers', AnswerViewSet, basename=\"answer\")\nrouter.register(r'scores', ScoreViewSet, basename=\"score\")\n# ✅ URL Patterns\nurlpatterns = [\n    # 🌍 API Home\n    path('', api_home, name=\"api-home\"),\n    # 🎯 Quiz Endpoints",
        "detail": "quiz_project.quiz.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "quiz_project.quiz.urls",
        "description": "quiz_project.quiz.urls",
        "peekOfCode": "urlpatterns = [\n    # 🌍 API Home\n    path('', api_home, name=\"api-home\"),\n    # 🎯 Quiz Endpoints\n    path('questions/random/', get_random_questions, name=\"get-random-questions\"),\n    path('questions/all/', get_all_questions, name=\"get-all-questions\"),\n    path('questions/add/', add_question, name=\"add-question\"),\n    path('questions/edit/<int:question_id>/', edit_question, name=\"edit-question\"),\n    path('questions/delete/<int:question_id>/', delete_question, name=\"delete-question\"),\n    # 🎯 Answer Endpoints",
        "detail": "quiz_project.quiz.urls",
        "documentation": {}
    },
    {
        "label": "PublicView",
        "kind": 6,
        "importPath": "quiz_project.quiz.views",
        "description": "quiz_project.quiz.views",
        "peekOfCode": "class PublicView(viewsets.ViewSet):\n    \"\"\"A public view for testing API access.\"\"\"\n    permission_classes = [AllowAny]\n    def list(self, request):\n        return Response({\"message\": \"This is a public endpoint!\"})\n# 🚀 ViewSets for DRF Router\nclass QuizCategoryViewSet(viewsets.ModelViewSet):\n    queryset = QuizCategory.objects.all()\n    serializer_class = QuizCategorySerializer\nclass QuestionViewSet(viewsets.ModelViewSet):",
        "detail": "quiz_project.quiz.views",
        "documentation": {}
    },
    {
        "label": "QuizCategoryViewSet",
        "kind": 6,
        "importPath": "quiz_project.quiz.views",
        "description": "quiz_project.quiz.views",
        "peekOfCode": "class QuizCategoryViewSet(viewsets.ModelViewSet):\n    queryset = QuizCategory.objects.all()\n    serializer_class = QuizCategorySerializer\nclass QuestionViewSet(viewsets.ModelViewSet):\n    queryset = Question.objects.all()\n    serializer_class = QuestionSerializer\nclass AnswerViewSet(viewsets.ModelViewSet):\n    queryset = Answer.objects.all()\n    serializer_class = AnswerSerializer\nclass ScoreViewSet(viewsets.ModelViewSet):",
        "detail": "quiz_project.quiz.views",
        "documentation": {}
    },
    {
        "label": "QuestionViewSet",
        "kind": 6,
        "importPath": "quiz_project.quiz.views",
        "description": "quiz_project.quiz.views",
        "peekOfCode": "class QuestionViewSet(viewsets.ModelViewSet):\n    queryset = Question.objects.all()\n    serializer_class = QuestionSerializer\nclass AnswerViewSet(viewsets.ModelViewSet):\n    queryset = Answer.objects.all()\n    serializer_class = AnswerSerializer\nclass ScoreViewSet(viewsets.ModelViewSet):\n    queryset = Score.objects.all()\n    serializer_class = ScoreSerializer",
        "detail": "quiz_project.quiz.views",
        "documentation": {}
    },
    {
        "label": "AnswerViewSet",
        "kind": 6,
        "importPath": "quiz_project.quiz.views",
        "description": "quiz_project.quiz.views",
        "peekOfCode": "class AnswerViewSet(viewsets.ModelViewSet):\n    queryset = Answer.objects.all()\n    serializer_class = AnswerSerializer\nclass ScoreViewSet(viewsets.ModelViewSet):\n    queryset = Score.objects.all()\n    serializer_class = ScoreSerializer",
        "detail": "quiz_project.quiz.views",
        "documentation": {}
    },
    {
        "label": "ScoreViewSet",
        "kind": 6,
        "importPath": "quiz_project.quiz.views",
        "description": "quiz_project.quiz.views",
        "peekOfCode": "class ScoreViewSet(viewsets.ModelViewSet):\n    queryset = Score.objects.all()\n    serializer_class = ScoreSerializer",
        "detail": "quiz_project.quiz.views",
        "documentation": {}
    },
    {
        "label": "fetch_questions_from_openai",
        "kind": 2,
        "importPath": "quiz_project.quiz.views",
        "description": "quiz_project.quiz.views",
        "peekOfCode": "def fetch_questions_from_openai():\n    \"\"\"Fetches general knowledge questions from OpenAI and caches them for 1 hour.\"\"\"\n    cached_questions = cache.get(\"questions\")\n    if cached_questions:\n        return cached_questions\n    try:\n        response = openai.ChatCompletion.create(\n            model=\"gpt-4\",\n            messages=[{\"role\": \"user\", \"content\": \"Generate 5 general knowledge questions with 3 options and one correct answer. JSON format.\"}],\n            temperature=0.7",
        "detail": "quiz_project.quiz.views",
        "documentation": {}
    },
    {
        "label": "api_home",
        "kind": 2,
        "importPath": "quiz_project.quiz.views",
        "description": "quiz_project.quiz.views",
        "peekOfCode": "def api_home(request):\n    return JsonResponse({\"message\": \"Welcome to the Quiz API!\"})\n# 🎯 Get 10 Random Questions\n@api_view(['GET'])\n@permission_classes([AllowAny])\ndef get_random_questions(request):\n    \"\"\"Returns 10 random questions with caching.\"\"\"\n    cached_questions = cache.get(\"random_questions\")\n    if cached_questions:\n        return Response(json.loads(cached_questions))",
        "detail": "quiz_project.quiz.views",
        "documentation": {}
    },
    {
        "label": "get_random_questions",
        "kind": 2,
        "importPath": "quiz_project.quiz.views",
        "description": "quiz_project.quiz.views",
        "peekOfCode": "def get_random_questions(request):\n    \"\"\"Returns 10 random questions with caching.\"\"\"\n    cached_questions = cache.get(\"random_questions\")\n    if cached_questions:\n        return Response(json.loads(cached_questions))\n    questions = list(Question.objects.all())\n    if len(questions) < 10:\n        return Response({\"error\": \"Not enough questions available.\"}, status=400)\n    random.shuffle(questions)\n    selected_questions = QuestionSerializer(questions[:10], many=True).data",
        "detail": "quiz_project.quiz.views",
        "documentation": {}
    },
    {
        "label": "get_all_questions",
        "kind": 2,
        "importPath": "quiz_project.quiz.views",
        "description": "quiz_project.quiz.views",
        "peekOfCode": "def get_all_questions(request):\n    \"\"\"Retrieve all questions.\"\"\"\n    questions = Question.objects.all()\n    serializer = QuestionSerializer(questions, many=True)\n    return Response(serializer.data)\n# 🏆 Get Top 10 Rankings\n@api_view(['GET'])\n@permission_classes([AllowAny])\ndef get_ranking(request):\n    \"\"\"Retrieve the top 10 scores.\"\"\"",
        "detail": "quiz_project.quiz.views",
        "documentation": {}
    },
    {
        "label": "get_ranking",
        "kind": 2,
        "importPath": "quiz_project.quiz.views",
        "description": "quiz_project.quiz.views",
        "peekOfCode": "def get_ranking(request):\n    \"\"\"Retrieve the top 10 scores.\"\"\"\n    scores = Score.objects.order_by('-points')[:10]\n    serializer = ScoreSerializer(scores, many=True)\n    return Response(serializer.data)\n# 🔒 Submit Player's Score (Protected)\n@api_view(['POST'])\n@authentication_classes([JWTAuthentication])\n@permission_classes([IsAuthenticated])\ndef submit_score(request):",
        "detail": "quiz_project.quiz.views",
        "documentation": {}
    },
    {
        "label": "submit_score",
        "kind": 2,
        "importPath": "quiz_project.quiz.views",
        "description": "quiz_project.quiz.views",
        "peekOfCode": "def submit_score(request):\n    \"\"\"Submit a player's score.\"\"\"\n    serializer = ScoreSerializer(data=request.data)\n    if serializer.is_valid():\n        serializer.save()\n        return Response({\"message\": \"Score submitted successfully!\"}, status=status.HTTP_201_CREATED)\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n# 🛠️ Add a New Question (Protected)\n@api_view(['POST'])\n@authentication_classes([JWTAuthentication])",
        "detail": "quiz_project.quiz.views",
        "documentation": {}
    },
    {
        "label": "add_question",
        "kind": 2,
        "importPath": "quiz_project.quiz.views",
        "description": "quiz_project.quiz.views",
        "peekOfCode": "def add_question(request):\n    \"\"\"Add a new question.\"\"\"\n    serializer = QuestionSerializer(data=request.data)\n    if serializer.is_valid():\n        serializer.save()\n        cache.delete(\"random_questions\")  # Invalidate cache\n        return Response({\"message\": \"Question added successfully!\"}, status=status.HTTP_201_CREATED)\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n# 🛠️ Edit an Existing Question (Protected)\n@api_view(['PUT'])",
        "detail": "quiz_project.quiz.views",
        "documentation": {}
    },
    {
        "label": "edit_question",
        "kind": 2,
        "importPath": "quiz_project.quiz.views",
        "description": "quiz_project.quiz.views",
        "peekOfCode": "def edit_question(request, question_id):\n    \"\"\"Edit an existing question.\"\"\"\n    question = get_object_or_404(Question, id=question_id)\n    serializer = QuestionSerializer(question, data=request.data, partial=True)\n    if serializer.is_valid():\n        serializer.save()\n        cache.delete(\"random_questions\")  # Invalidate cache\n        return Response({\"message\": \"Question updated successfully!\"}, status=status.HTTP_200_OK)\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n# 🗑️ Delete a Question (Protected)",
        "detail": "quiz_project.quiz.views",
        "documentation": {}
    },
    {
        "label": "delete_question",
        "kind": 2,
        "importPath": "quiz_project.quiz.views",
        "description": "quiz_project.quiz.views",
        "peekOfCode": "def delete_question(request, question_id):\n    \"\"\"Delete a question.\"\"\"\n    question = get_object_or_404(Question, id=question_id)\n    question.delete()\n    cache.delete(\"random_questions\")  # Invalidate cache\n    return Response({\"message\": \"Question deleted successfully!\"}, status=status.HTTP_204_NO_CONTENT)\n# 🛠️ Add an Answer to a Question (Protected)\n@api_view(['POST'])\n@authentication_classes([JWTAuthentication])\n@permission_classes([IsAuthenticated])",
        "detail": "quiz_project.quiz.views",
        "documentation": {}
    },
    {
        "label": "add_answer",
        "kind": 2,
        "importPath": "quiz_project.quiz.views",
        "description": "quiz_project.quiz.views",
        "peekOfCode": "def add_answer(request, question_id):\n    \"\"\"Add an answer to a question.\"\"\"\n    question = get_object_or_404(Question, id=question_id)\n    data = request.data.copy()\n    data['question'] = question.id\n    serializer = AnswerSerializer(data=data)\n    if serializer.is_valid():\n        serializer.save()\n        return Response({\"message\": \"Answer added successfully!\"}, status=status.HTTP_201_CREATED)\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)",
        "detail": "quiz_project.quiz.views",
        "documentation": {}
    },
    {
        "label": "edit_answer",
        "kind": 2,
        "importPath": "quiz_project.quiz.views",
        "description": "quiz_project.quiz.views",
        "peekOfCode": "def edit_answer(request, answer_id):\n    \"\"\"Edit an existing answer.\"\"\"\n    answer = get_object_or_404(Answer, id=answer_id)\n    serializer = AnswerSerializer(answer, data=request.data, partial=True)\n    if serializer.is_valid():\n        serializer.save()\n        return Response({\"message\": \"Answer updated successfully!\"}, status=status.HTTP_200_OK)\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n# 🗑️ Delete an Answer (Protected)\n@api_view(['DELETE'])",
        "detail": "quiz_project.quiz.views",
        "documentation": {}
    },
    {
        "label": "delete_answer",
        "kind": 2,
        "importPath": "quiz_project.quiz.views",
        "description": "quiz_project.quiz.views",
        "peekOfCode": "def delete_answer(request, answer_id):\n    \"\"\"Delete an answer.\"\"\"\n    answer = get_object_or_404(Answer, id=answer_id)\n    answer.delete()\n    return Response({\"message\": \"Answer deleted successfully!\"}, status=status.HTTP_204_NO_CONTENT)\n# 🌍 Public API View\nclass PublicView(viewsets.ViewSet):\n    \"\"\"A public view for testing API access.\"\"\"\n    permission_classes = [AllowAny]\n    def list(self, request):",
        "detail": "quiz_project.quiz.views",
        "documentation": {}
    },
    {
        "label": "openai.api_base",
        "kind": 5,
        "importPath": "quiz_project.quiz.views",
        "description": "quiz_project.quiz.views",
        "peekOfCode": "openai.api_base = \"https://api.openai.com/v1\"\nopenai.api_key = settings.OPENAI_API_KEY\n# 🔍 Helper to Fetch Questions from OpenAI with Caching\ndef fetch_questions_from_openai():\n    \"\"\"Fetches general knowledge questions from OpenAI and caches them for 1 hour.\"\"\"\n    cached_questions = cache.get(\"questions\")\n    if cached_questions:\n        return cached_questions\n    try:\n        response = openai.ChatCompletion.create(",
        "detail": "quiz_project.quiz.views",
        "documentation": {}
    },
    {
        "label": "openai.api_key",
        "kind": 5,
        "importPath": "quiz_project.quiz.views",
        "description": "quiz_project.quiz.views",
        "peekOfCode": "openai.api_key = settings.OPENAI_API_KEY\n# 🔍 Helper to Fetch Questions from OpenAI with Caching\ndef fetch_questions_from_openai():\n    \"\"\"Fetches general knowledge questions from OpenAI and caches them for 1 hour.\"\"\"\n    cached_questions = cache.get(\"questions\")\n    if cached_questions:\n        return cached_questions\n    try:\n        response = openai.ChatCompletion.create(\n            model=\"gpt-4\",",
        "detail": "quiz_project.quiz.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.asgi",
        "description": "quiz_project.quiz_project.asgi",
        "peekOfCode": "application = ProtocolTypeRouter({\n    \"http\": get_asgi_application(),\n    \"websocket\": URLRouter(websocket_urlpatterns),\n})",
        "detail": "quiz_project.quiz_project.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-76qrr=t8$48*3b#mqttn4m1bwl^5s&e%1+juz@0bwa)!)%vi@1'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-76qrr=t8$48*3b#mqttn4m1bwl^5s&e%1+juz@0bwa)!)%vi@1'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    # Daphne primero\n    'daphne',  # Necesario para Channels\n    'corsheaders',\n    # Apps de Django",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    # Daphne primero\n    'daphne',  # Necesario para Channels\n    'corsheaders',\n    # Apps de Django\n    'django.contrib.admin',\n    'django.contrib.auth',",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    # Daphne primero\n    'daphne',  # Necesario para Channels\n    'corsheaders',\n    # Apps de Django\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    # Daphne primero\n    'daphne',  # Necesario para Channels\n    'corsheaders',\n    # Apps de Django\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    # Enable JWT authentication\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    # Default permission: Require authentication\n    'DEFAULT_PERMISSION_CLASSES': (\n        'rest_framework.permissions.IsAuthenticated',\n    ),\n    # Pagination for large datasets",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "SPECTACULAR_SETTINGS",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "SPECTACULAR_SETTINGS = {\n    'TITLE': 'Your Project API',\n    'DESCRIPTION': 'Your project description',\n    'VERSION': '1.0.0',\n    'SERVE_INCLUDE_SCHEMA': False,\n    # OTHER SETTINGS\n}\nASGI_APPLICATION = 'quiz_project.asgi.application'\nCHANNEL_LAYERS = {\n    \"default\": {",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "ASGI_APPLICATION",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "ASGI_APPLICATION = 'quiz_project.asgi.application'\nCHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"channels.layers.InMemoryChannelLayer\",  # Usa Redis en producción\n    },\n}\nCHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"channels_redis.core.RedisChannelLayer\",\n        \"CONFIG\": {",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "CHANNEL_LAYERS",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "CHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"channels.layers.InMemoryChannelLayer\",  # Usa Redis en producción\n    },\n}\nCHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"channels_redis.core.RedisChannelLayer\",\n        \"CONFIG\": {\n            \"hosts\": [(\"localhost\", 6379)],",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "CHANNEL_LAYERS",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "CHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"channels_redis.core.RedisChannelLayer\",\n        \"CONFIG\": {\n            \"hosts\": [(\"localhost\", 6379)],\n        },\n    },\n}\n# Configuración de Redis para cachear preguntas generadas\nCACHES = {",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "CACHES",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "CACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',\n    }\n}\nMIDDLEWARE = [\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "ROOT_URLCONF = 'quiz_project.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "WSGI_APPLICATION = 'quiz_project.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nimport os\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'html')",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nimport os\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'html')\n# Default primary key field type",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nimport os\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'html')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nimport os\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'html')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'html')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# settings.py\nimport os\nimport environ\nfrom pathlib import Path",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'html')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# settings.py\nimport os\nimport environ\nfrom pathlib import Path\nBASE_DIR = Path(__file__).resolve().parent.parent",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'html')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# settings.py\nimport os\nimport environ\nfrom pathlib import Path\nBASE_DIR = Path(__file__).resolve().parent.parent\n# Initialize environment variables",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# settings.py\nimport os\nimport environ\nfrom pathlib import Path\nBASE_DIR = Path(__file__).resolve().parent.parent\n# Initialize environment variables\nenv = environ.Env(\n    DEBUG=(bool, False)\n)",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Initialize environment variables\nenv = environ.Env(\n    DEBUG=(bool, False)\n)\nenviron.Env.read_env(os.path.join(BASE_DIR, '.env'))\n# Now retrieve your variables\nOPENAI_API_KEY = env('OPENAI_API_KEY')\n# settings.py\nREST_FRAMEWORK = {",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "env = environ.Env(\n    DEBUG=(bool, False)\n)\nenviron.Env.read_env(os.path.join(BASE_DIR, '.env'))\n# Now retrieve your variables\nOPENAI_API_KEY = env('OPENAI_API_KEY')\n# settings.py\nREST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_RATES': {\n        'anon': '100/hour',",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_KEY",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "OPENAI_API_KEY = env('OPENAI_API_KEY')\n# settings.py\nREST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_RATES': {\n        'anon': '100/hour',\n        'user': '1000/hour'\n    }\n}\n# Other settings...\nimport os",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_RATES': {\n        'anon': '100/hour',\n        'user': '1000/hour'\n    }\n}\n# Other settings...\nimport os\nfrom dotenv import load_dotenv\n# Cargar variables desde .env",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "GENAI_API_KEY",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "GENAI_API_KEY = os.getenv(\"GENAI_API_KEY\")\nif not GENAI_API_KEY:\n    raise ValueError(\"⚠️ Falta la API Key de Google Gemini en el archivo .env\")\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:3000\",  # URL del frontend de Reflex\n]",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.settings",
        "description": "quiz_project.quiz_project.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = [\n    \"http://localhost:3000\",  # URL del frontend de Reflex\n]",
        "detail": "quiz_project.quiz_project.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.urls",
        "description": "quiz_project.quiz_project.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('quiz.urls')),\n]",
        "detail": "quiz_project.quiz_project.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "quiz_project.quiz_project.wsgi",
        "description": "quiz_project.quiz_project.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "quiz_project.quiz_project.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "quiz_project.manage",
        "description": "quiz_project.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'quiz_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "quiz_project.manage",
        "documentation": {}
    },
    {
        "label": "generate_questions",
        "kind": 2,
        "importPath": "puebra",
        "description": "puebra",
        "peekOfCode": "def generate_questions(category, num_questions=50):  # Reducción a 50 preguntas por lote\n    questions = []\n    for _ in range(num_questions):\n        prompt = f\"Genera una pregunta de opción múltiple sobre {category} con 4 respuestas posibles, indicando la respuesta correcta.\"\n        # Llamada a la API de OpenAI con el modelo actualizado\n        response = openai.ChatCompletion.create(\n            model=\"gpt-3.5-turbo\",  # Modelo gpt-3.5-turbo\n            messages=[{\"role\": \"user\", \"content\": prompt}],\n            max_tokens=150,  # Ajusta según sea necesario\n            n=1,",
        "detail": "puebra",
        "documentation": {}
    },
    {
        "label": "save_to_csv",
        "kind": 2,
        "importPath": "puebra",
        "description": "puebra",
        "peekOfCode": "def save_to_csv(questions, filename='questions_data.csv'):\n    with open(filename, mode='w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(['Category', 'Question', 'Answer 1', 'Answer 2', 'Answer 3', 'Answer 4'])\n        for question in questions:\n            row = [\n                question['category'],\n                question['question'],\n                question['answers'][0],\n                question['answers'][1],",
        "detail": "puebra",
        "documentation": {}
    },
    {
        "label": "generate_all_questions",
        "kind": 2,
        "importPath": "puebra",
        "description": "puebra",
        "peekOfCode": "def generate_all_questions():\n    all_questions = []\n    for category in categories:\n        print(f\"Generando preguntas para la categoría: {category}\")\n        # Realizar la solicitud por lotes pequeños\n        category_questions = generate_questions(category, 50)  # Solicita 50 preguntas por categoría\n        all_questions.extend(category_questions)\n        # Pausa entre solicitudes para no exceder los límites de la API\n        time.sleep(2)  # Puedes ajustar este tiempo según sea necesario\n    return all_questions",
        "detail": "puebra",
        "documentation": {}
    },
    {
        "label": "categories",
        "kind": 5,
        "importPath": "puebra",
        "description": "puebra",
        "peekOfCode": "categories = [\n    \"Science\", \"History\", \"Geography\", \"Art\", \"Sports\", \"Technology\",\n    \"Mathematics\", \"Literature\", \"Movies\", \"Music\", \"Nature\", \"Politics\",\n    \"Economics\", \"Philosophy\", \"Psychology\", \"Religion\", \"Astronomy\",\n    \"Medicine\", \"Law\", \"Business\", \"Programming\", \"Engineering\",\n    \"Health\", \"Physics\", \"Chemistry\", \"Biology\", \"Environmental Science\",\n    \"Languages\", \"Sociology\", \"Anthropology\", \"Archaeology\", \"Statistics\",\n    \"Data Science\", \"Astronautics\", \"Gaming\", \"Mythology\", \"Trivia\",\n    \"Cooking\", \"Food & Drink\", \"Fashion\", \"Photography\", \"Pets\",\n    \"Travel\", \"Hobbies\", \"DIY\", \"Education\", \"Fitness\", \"Life Skills\",",
        "detail": "puebra",
        "documentation": {}
    },
    {
        "label": "all_questions",
        "kind": 5,
        "importPath": "puebra",
        "description": "puebra",
        "peekOfCode": "all_questions = generate_all_questions()\nsave_to_csv(all_questions)\nprint(\"Las preguntas han sido generadas y guardadas en 'questions_data.csv'.\")",
        "detail": "puebra",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "rxconfig",
        "description": "rxconfig",
        "peekOfCode": "config = rx.Config(\n    app_name=\"quiz_frontend\",\n    api_url=\"http://127.0.0.1:8000/api\"  # Ajusta según la URL de tu backend Django\n)",
        "detail": "rxconfig",
        "documentation": {}
    }
]